{"name":"Ark","tagline":"Ark' s Basic Documentation","body":"Welcome to Symforge's Ark\r\n=========================\r\n\r\nWhat is Ark?\r\n------------\r\nArk is ready-to-go multi functional and extendable Doctrine2 based database abstraction framework for who want to create fast CLI applications with multiple database handler. In basic, you only need **Ark** to create CLI/Web projects with Doctrine2 support**\r\n\r\n> Ark is not only built for CLI but also for Web. You can use it with your Web Applications. Better, you can use Ark Bundles for Symfony2 and even you can use profiler to track database, package and service actions!\r\n> \r\n> Also, ArkBundle has exception feature that is sends full stack report to your email address with same as exception page of Symfony2...\r\n\r\nRequirements\r\n------------\r\nArk only support PHP 5.3.3 and later. Also, you need Console, Doctrine2 and YAML components. But you don't need to install them manually. Ark **can do** that via **Composer** ...\r\n\r\nInstallation\r\n------------\r\nVia Composer ([http://getcomposer.org](http://getcomposer.org \"visit composer\")):\r\n\r\n\t{\r\n\t\t\"require\": {\r\n\t        \"symforge/ark\": \"~2.0\"\r\n\t    }\r\n\t}\r\n\r\nOr full automatically:\r\n\r\n\t{\r\n\t\t\"require\": {\r\n\t        \"symforge/ark\": \"~2.0\"\r\n\t    },\r\n\t    \"scripts\": {\r\n\t        \"post-install-cmd\": [\r\n\t            \"Symforge\\\\Ark\\\\Build::buildParameters\"\r\n\t        ],\r\n\t        \"post-update-cmd\": [\r\n\t            \"Symforge\\\\Ark\\\\Build::buildParameters\"\r\n\t        ]\r\n\t    }\r\n\t}\r\n\r\n\r\nNow, Ark with requirements is installed. Need to create a project\r\n\r\n\t$ vendor/bin/ark project:create 'Test App' cli\r\n\r\nNow Test App with v1.0.0 for CLI is created. We also support `web` mode. In this case you need full stack Symfony2 with Ark Bundles.\r\n\r\nType...\r\n\r\n\tapp/console list\r\n\r\n...and you're got to go :) Your console app is ready with DB support.\r\n\r\nDatabase\r\n========\r\n\r\nFirst impression\r\n----------------\r\n\r\nArk supports multiple database connections via Doctrine2 with dynamic declaration. For example, lets say you have 10 Mail Servers. In this case, DB is same but the IP' s/Credentials are different. With Ark, you can connect that 10 servers without loosing the control and existing database connections, Entities and Metadatas.\r\n\r\nWith Doctrine2 itself, you have to provide this all servers in config file. In other example, with symfony2 you have to declare these databases with bundles and all database connections must be provided in doctrine.yml. No more!... Ark can do that dynamically inside of PHP.\r\n\r\nYou can create database connections as much as you want and you can use Cache, Debug and full stack framework features that doctrine provides.\r\n\r\nDatabases are managed by manually inside of your commands or can be managed via **Packages**. We will see Packages and Services later. Now, lets create a database Connection and entities/metadatas for it.\r\n\r\nConnect\r\n-------\r\nNow, like config.php or config.yml, lets create our first reference server. You have to give Ark a reference server to create entities and metadatas from it. We will do this inside of **ark.yml**. This connection parameters **ONLY** used for creating entities. Nothing more. You will later, create a connection manually inside of your application based on these values as much as you want. Lets get started:\r\n\r\nOpen `app/config/ark.yml` and locate `database` section (bottom)\r\n\r\nIn first application creation a default database sample will be there in ark.yml.\r\n\r\n\t...\r\n\tdatabase:\r\n\t      ref_email:\r\n\t        driver:       pdo_mysql\r\n\t        host:         '127.0.0.1'\r\n\t        user:         root\r\n\t        password:     null\r\n\t        dbname:       mail_server\r\n\t        port:         3306\r\n\t        charset:      UTF8\r\n\t        namespace:    'Database\\Email'\r\n\t        schema:       yml\r\n\r\n> **Note**: You won't do this setting for all 10 servers. This is ONLY for creating Entities and Metadatas for your connections. Later, Ark discard this connections and use your dynamic connections. Nothing more ... So, this file is only intend for REFERENCE.\r\n\r\nNow. Let me explain this to you:\r\n\r\n- **ref_email**: This is your connection name. When creating a package or reference it, you will use this name.\r\n- **driver**: Which driver/adapter you want to use. Like pdo_pgsql etc...\r\n- **host**: Host IP or localhost\r\n- **user**: Database username\r\n- **password**: Your password for this db\r\n- **dbname**: Database name which contains tables.\r\n- **port**: Port number\r\n- **charset**: Charset for this db to connect and add/edit\r\n- **namespace**: This namespace is required because, entities will be generated by this namespace and folders will be created by this namespace. This can be anything. But use same a-like prefix for every connection. Database\\Email will contains all tables and entities inside. Basically, Email refer \"Email Servers\". Database refers nothing. It just a prefix that we used. It can be different. And it will created as src/Database/Email/. You can add more dirs/prefixes.\r\n- **schema**: Which schema you want to generate metadatas and entities. Can be yml or xml or annotation.\r\n- **Ark** supports schemas insaide of databases. They will created during entities and metadatas.\r\n\r\nSo, our connection set. Now lets create Entities and metadatas.\r\n\r\n\t$ vendor/bin/ark database:generate:metadata ref_email\r\n\r\nSee, ref_email is used for reference and let ark to create entities for this connection.\r\n\r\nNow hit enter and metadatas will be created in `./src/Database/Email/ORM/`\r\n\r\nOk. Lets create Entities.\r\n\r\n\t$ vendor/bin/ark database:generate:entities ref_email\r\n\r\nSame again but this time entities. Okay, entities created in ./src/Database/Email/*.php\r\n\r\nAt this point we don't need `ref_email` connection, even, we don't need ark.yml to read database :) Now, everything will be made in PHP.\r\n\r\nCreating a real connection\r\n--------------------------\r\nCreate a command. I am passing this tutorial because you probably already now how to create Commands.\r\n\r\n**TestCommand.php:**\r\n\t\r\n\t<?php\r\n\t...\r\n\tuse Doctrine\\Common\\Cache\\ArrayCache;\r\n\tuse Symforge\\Ark\\Component\\Base\\Engine;\r\n\tuse Symforge\\Ark\\Component\\Bridge\\Connection;\r\n\r\n\t//Create engine instance\r\n\t$engine = new Engine();\r\n\r\n\t//Boot.\r\n\t$engine->boot(null, 'dev'); //null because kernel does not exist in cli. dev for development. Must be prod on production.\r\n\t\r\n\t//create database object\r\n\t$database = new Database($engine, new ArrayCache()); //ApcCache has no effect in CLI.\r\n\r\n    $connection = new Connection();\r\n    \r\n    //This has nothing to do with ark.yml.\r\n    $connection->setAdapter('pdo_mysql')\r\n            ->setHost('127.0.0.1')\r\n            ->setCharset('UTF8')\r\n\t\t\t->setConnectionId(0)\r\n            ->setConnectionName('email_server') // this is same like ref_email.\r\n            ->setDatabaseName('email')\r\n            ->setUserName('root')\r\n            ->setSchema('xml')\r\n            ->setNamespace('Database\\\\Email') //Namespace must be the same NS on ark.yml to find correct files!\r\n            ->setUserPassword(null)\r\n            ->setPort(3306);\r\n\r\n> Now, one thing you should be more careful: At the begining we are talked about multiple server connection at the same time. The above code is only intend to connect one server which is **127.0.0.1.**\r\n> \r\n> We have to connect another server. So, we must change `setConnectionId(0)` to `setConnectionId(1).` This will create another instance :)\r\n\r\nIt's time to add this connection to the container and get connect:\r\n\r\n\t$database->add($connection);\r\n\r\nThats' it. Lets try some doctrine features.\r\n\r\n\t$fetch = $database->getEntity('email', 0)->getRepository('Database\\\\Email\\\\Mailbox')->findAll();\r\n\r\nNow, this is the hard way. Fortunately, we have **Packages** in Ark! With packages you can directly access entity and repository without giving its namespace and table name each time. Also, you can persist, merge and delete any data you want easily with packages.\r\n\r\nPackages\r\n--------\r\n\r\nLets create a package for email database:\r\n\r\n\t$ vendor/bin/ark namespace connection\r\n\r\n- **namespace**: Namespace for package.\r\n- **connection**: Connection name in your ark.yml reference.\r\n\r\nSo, lets create this file: `src/Package/WebMail/Email.php`\r\n\r\n\t$ vendor/bin/ark Package/WebMail/Email ref_email\r\n\r\nNow, ref_email connection in our ark.yml will be referenced to this package. After, we will able to use the schema.\r\n\r\n> Do not use packages as database bridges or methods. Instead, use them as container of modules. Every module is assigned to the package.\r\n\r\nModules\r\n-------\r\n\r\nNow, we've  created package. Not it is time to create a module. You will put everything inside of this module. Package will be the container of this module(s). One package can contain unlimited modules.\r\n\r\n> Modules represent **table** and packages represent **database**.\r\n\r\nCreate a module for previously created package (_Package/WebMail/Email_)\r\n\r\nFile: `src/Package/WebMail/Email/Mailbox.php`\r\n\r\n> Don't get confused. Mailbox.php inside of Email folder. Email.php is the main package of this module. You probbably get confused. Let me clear; `A.php` is a **package** container and `A` **folder** contains modules belongs to `A.php`. Simple yay! :) Ah BTW, `WebMail` is tell us that this is web mail package. Thats all. You can add more names like `Package/My/Data/User/Bla/Bla/Email`\r\n\r\n\t$ vendor/bin/ark package:create:module package_name module_name --table=TableName\r\n\r\n- **package_name**: Previously created package namespace (fully qualified)\r\n- **module_name**: Module name. Not a namespace. Usually it is equal to table name.\r\n- **--table=_TABLE_**: Table name. Not needed. But if used, then module will able to access this table directly \r\n\r\nSo we will do this:\r\n\r\n\t$ vendor/bin/ark package:create:module Package/WebMail/Email Mailbox --table=mailbox\r\n\r\nNow Mailbox.php created and all functions/methods will be able to access mailbox table inside of email connection.\r\n\r\nLets declare a package dynamically:\r\n\t\r\n\t$email = new Email(0); // 0 indicated connectionId(0)... If we type 1 this package will be used for server 1.\r\n\t\r\n\t$mailbox = $email->getMailbox();\r\n\t\r\n\t//This method inside of Mailbox.php\r\n\tpublic function test() {\r\n\t\t$all = $this->getRepository()->findAll();\r\n\t\t$one = $this->getRepository()->find(1);\r\n\t}\r\n\r\n\t$data = $mailbox->test();\r\n\t//That's all!\r\n\r\n>As you can see, getRepository() is immediately available inside of the Mailbox module. Because Package Email is belongs to `Email` database and this module belongs to `mailbox` table. So, we don't need to give all this information again. Ark knows who is who.\r\n\r\nServices\r\n--------\r\n\r\nServices are depent on your environment. CLI or Bundle. For CLI it may not provide great opportunity but with Bundles it provides great way to implement your services. They are called once and you can -for example- create connections inside of services.\r\n\r\n**For Bundles:**\r\n\r\n\t$ vendor/bin/ark service:create namespace --bundle=BundleNamespace\r\n\r\n> - **--bundle** parameter is only used on Symfony2.\r\n> - **--bundle** will override oyur existing bundle and change your main bundle php file. Be aware!\r\n\r\nBoot method\r\n-----------\r\n\r\nEvery package and every module has a boot() method. Thay are called once for every declaration. You can change them to work for you.\r\n\r\nProfiler\r\n--------\r\n\r\n**Profiler** is only enabled on Symfony2. Use ArkBundle, DatabaseBundle, PackageBundle and ServiceBundle for profiling.\r\n\r\n\r\nGIT Features (-Dev)\r\n===================\r\n\r\nArk provides some easy bridge to the Git. Please use `bin/ark list` to list all possible values.\r\n\r\nOne feature is you can create any dir for git and add, commit and push them without entering that directory. Just use bin/ark command and preferences will be fetched from ark.yml. \r\n\r\n> see ark.yml for more details.\r\n\r\nAdd\r\n---\r\n\r\n\t$ bin/ark git:add [files]\r\n\r\nCommit\r\n------\r\n\t\r\n\t$ bin/ark git commit 'message'\r\n\r\nPush\r\n----\r\n\r\n\t$ bin/ark git:push [branch]\r\n\r\nRelease\r\n-------\r\n\t\r\n\t$ bin/ark git:release\r\n\r\n> This will create a TAG for current version like v1.0.0. This version info cames from Ark.yml file.\r\n\r\nRemove\r\n------\r\n\r\n\t$ bin/ark git:remove 1.0.0\r\n\r\n> This removes a tag.\r\n\r\nImportant Notes\r\n===============\r\n\r\n**Packages** can be declared many times and can be profiled seperately.\r\n**Services** must be declared only once per instance and tracked one time only on profiling tools.\r\n\r\nAccessibilty\r\n============\r\n\r\nIf you want to access Engine, you can access it by this:\r\n\r\n\t<?php\r\n\tuse Symforge\\Ark\\Component\\Base\\Engine\r\n\r\n\tclass IndexController extends Controller {\r\n\t\t$engine = Engine::getInstance();\r\n\t}\r\n\t\r\nOr. Alternatively you can extends to our custom controller.\r\n\r\n\t<?php\r\n\tuse Symforge\\Ark\\Component\\Extra\\Controller;\r\n\r\n\tclass IndexController extends Controller {\r\n\t\t$engine = $this->getEngine();\r\n\t}\r\n\r\n\t\r\nContribute\r\n==========\r\n\r\nWant to make this project **better** via adding more functions or so? Just drop a message to the issues page with your details.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}